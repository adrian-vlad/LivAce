''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''                                    
'
'
'''''''''''''''''''''''''''''''''''''''    MCU SETTINGS    '''''''''''''''''''''''''''''''''''''''''''''''''''
OSCCON        = %01100001            ' set OSC fuse bits to 4MHz
RCSTA  = %00000000              ' disable usart
ANSEL        = %00000000            ' Analogue select 'off'
ANSELH         = %00000000            ' Analogue select 'off'
WPUA         = %00000000            ' Set Pullups PortA 'off'
WPUB         = %00000000            ' Set Pullups PortB 'off'
IOCA        = %00000000            ' Interupt on change 'off'
INTCON      = %00000000         'initialize INTCON register, Enable Int
OPTION_REG     = %10110001
CM1CON0        = %10010101            ' Comparator C1 Control Register 0
CM2CON0        = %10100101            ' Comparator C2 Control Register 0
CM2CON1        = %00000000            ' Comparator C2 Control Register 1
SRCON        = %11110000            ' SR Latch Control Register
VRCON        = %10000111            ' Voltage Ref Control Register
;ADCON1      = %00001111    'Set up ADCON1 register no matter what you're doing!


'''''''''''''''''''''''''''''''''''''''    APPLICATION SETTINGS    '''''''''''''''''''''''''''''''''''''''''''''''''''
C_CHANNELS con 2  ; Define number of LIVOLO Channels (Gang): 1, 2, 3 or 4
C_SENSE    con 20 ; Increase to less sensitive, decrease makes it more sensitive.

LED_0        var     PortB.6
LED_1        var     PortC.5

LED_INPUT_0  var     PortB.4
LED_INPUT_1  var     PortB.5
SW_OUTPUT_0  var     PortC.6
SW_OUTPUT_1  var     PortC.7

PORTA         = %00000000
TRISA         = %00000100            ' bit2 is for Timer0 input
PORTB         = %00000000
TRISB         = %00110000
PORTC         = %00000000
TRISC         = %00001010
'''''''''''''''''''''''''''''''''''''''    VARIABLES        '''''''''''''''''''''''''''''''''''''''''''''''''''
SW_raw        var        Word[C_CHANNELS]
SW_average    var        Word[C_CHANNELS]
SW_calib      var        Word[C_CHANNELS]
debounce      var        Byte[C_CHANNELS]
sense_time    var        Word[C_CHANNELS]
ch            var        Byte
i             var        Byte
clear

for i = 0 to 1
    toggle LED_0
    pause 500
next
LED_0 = 0

for i = 0 to 1
    toggle LED_1
    pause 500
next
LED_1 = 0

''''''''''''''''''''''''''''''''''''''''''    MAIN PROGRAM    ''''''''''''''''''''''''''''''''''''''''''''''''''''
gosub CALIBRATE

START:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CHECK SW0
ch = 0
gosub CHECK_SW
if debounce[ch] > 0 then
    pause 50
    SW_OUTPUT_0 = 1
    pause 50
else
    SW_OUTPUT_0 = 0
endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; CHECK SW1
ch = 1
gosub CHECK_SW
if debounce[ch] > 0 then
    pause 50
    SW_OUTPUT_1 = 1
    pause 50
else
    SW_OUTPUT_1 = 0
endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; LEDs
LED_0 = LED_INPUT_0
LED_1 = LED_INPUT_1

goto START

'''''''''''''''''''''''''''''''''''''''''    CHECK SWITCHES    '''''''''''''''''''''''''''''''''''''''''''''''''''
CHECK_SW:
    CM1CON0.0 = 1                                ' change to correct input ch (bit 0)
    CM1CON0.1 = ch.0                                ' change to correct input ch (bit 1)
    CM2CON0.0 = 1                                ' change to correct input ch (bit 0)
    CM2CON0.1 = ch.0                                ' change to correct input ch (bit 1)

    TMR0 = 0                                        ' Reset the Timer 0
    PauseUs sense_time[ch]                            ' Pause for appropriate time to get default 200 cycles
    SW_raw[ch] = TMR0 * 10                        ' Do some averaging

    SW_average[ch] = (9 * SW_average[ch] + SW_raw[ch]) / 10

    if SW_raw[ch] < (SW_calib[ch] - C_SENSE) then ; 
       debounce[ch] = 1                ' Debounce switch
    else
       debounce[ch] = 0
    endif
return

'''''''''''''''''''''''''''''''''''''''''    CHECK SWITCHES    '''''''''''''''''''''''''''''''''''''''''''''''''''
CALIBRATE:
for ch = 0 to 1
    CAL_LOOP:
    sense_time[ch] = sense_time[ch] + 1

    gosub CHECK_SW
    SW_calib[ch] = SW_average[ch]

    if SW_raw[ch] < 2000 then
        goto CAL_LOOP
    endif
next
return

END
